package com.kh.day03.array;

public class Exam_SelectSort {
	public static void main(String [] args)
	{
		// 선택정렬이란?
		// 배열을 전부 검색하여 최소값을 고르고 왼쪽부터 채워나가는 정렬 알고리즘
		// 특징 : 데이터의 양이 적을 때 좋은 성능을 보여주는 정렬이지만
		// 데이터 양이 많을 때 급격한 성능 저하를 보임
		// 배열의 n번 인덱스값을 n+1번 ~ 마지막 인덱스까지 비교함
		
		// {2, 5, 4, 1, 3}
		// 첫번째 : {1, 5, 4, 2, 3}
		
		// {1, 5, 4, 2, 3}
		// 두번째 : {1, 2, 4, 5, 3}
		
		// {1, 2, 4, 5, 3}
		// 세번째 : {1, 2, 3, 5, 4}
		
		// {1, 2, 3, 5, 4}
		// 네번째 : {1, 2, 3, 4, 5}
		
		// 1. 최소값의 값을 구하는 방법
		// 2. 배열의 값을 교환
		// 3. min값은 최소값이 아니라 인덱스값을 저장해야함.
		// 4. 최소값을 찾는 범위가 시작은 1이 되고 점점 증가해야 했었고,
		// 바꿔야 하는 자리는 0부터 시작해서 1씩 증가해야했음.
		// 5. 만족하는 변수를 선언하여 1씩 증가하는 for문 작성 후 코드를 이동
		
		int [] arrs = {2, 5, 4, 1, 3};
		int min = 0;
		
		for(int j = 0; j < arrs.length; j++) {
			min = j;
			for (int i = j + 1; i < arrs.length; i++) {
				if (arrs[min] > arrs[i]) {
					min = i;
				}
			}
			int temp = arrs[j];
			arrs[j] = arrs[min];
			arrs[min] = temp;
		}
		
		// i와 j의 조건식
		// i는 변경할 순서가 된 인덱스 값이고, j는 변경 될 값을 찾는 범위가 됨.
		// j의 조건식을 for(int j = 0; j < arrs.length; j++) 으로 작성해서
		// 첫 번째엔 0 ~ 4번째 배열을 범위로 설정하고, 두 번째엔 j의 값이 1이 되고,
		// 1 ~ 4번째의 배열을 범위로 설정하면서 최종적으론 4 ~ 5번째 배열을
		// 범위로 지정하게 된다.
		// 그리고, min = j; 를 선언해서 if문의 min의 값이 0부터 3까지의 인덱스가
		// 들어가도록 한다.
		
		// i는 0 ~ 3까지 총 4번 반복하면서 값을 찾아 변경해줘야 하는데,
		// 초기값을 j의 값보다 1 크게 조건식을 작성하고, 
		// if문의 조건식을 if (arrs[min] > arrs[i]) 으로 작성해서
		// 첫번째 반복할때 arrs[min]이 첫번째 배열, 즉 2가 되는데,
		// 2 보다 작은 값인 1을 찾을때까지 반복하게 되고, 1을 찾았을 때
		// i의 값인 1이 min에 들어가게 된다.
		
		// j가 0일때 j의 배열이 temp에 저장되어있기 때문에 결과적으로
		// 첫번째 배열이 arrs[min] 가 대입되어 1이 되고, 원래 1의 배열값이였던
		// arrs[min]에 temp의 값인 첫번째 배열의값이 대입되어 자리가 바뀌게 되고,
		// 이것을 j가 4가 될 때 까지 반복한다.
		
		
		
		
//		int [] arrs = {2, 5, 4, 1, 3};
//		int min = 0; // min은 최소값을 저장하면 안되고 최소인 인덱스값을 저장해야한다.
//		for(int i = 0; i < arrs.length; i++) {
//			min = i;
//			for(int j = i+1; j < arrs.length; j++) {
//				if(arrs[min] > arrs[j]) {
//					min = j;
//				}
//			}
//			int temp = arrs[i];
//			arrs[i] = arrs[min];
//			arrs[min] = temp;
//		}
		
		
		
		// 배열 출력
		for(int i = 0; i < arrs.length; i++) {
			System.out.print(arrs[i] + " ");
		}
	}
	// {2, 5, 4, 1, 3}
	// j = 1, min = 0
	// 첫번째 : {1, 5, 4, 2, 3}
	
	// {1, 5, 4, 2, 3}
	// j = 2, min = 1
	// 두번째 : {1, 2, 4, 5, 3}
	
	// {1, 2, 4, 5, 3}
	// j = 3, min = 2
	// 세번째 : {1, 2, 3, 5, 4}
	
	// {1, 2, 3, 5, 4}
	// j = 4, min = 3
	// 네번째 : {1, 2, 3, 4, 5}
}
